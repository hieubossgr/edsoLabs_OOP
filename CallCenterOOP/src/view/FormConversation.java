/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.IOFile;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Call;
import model.Conversation;

/**
 *
 * @author hieub
 */
public class FormConversation extends javax.swing.JPanel {

    private DefaultTableModel tm;
    private String fileCall;
    private String fileConversation;
    private List<Conversation> list;
    
    public FormConversation() {
        initComponents();
        setSize(900, 700);
        String cols[] = {"Conversation Id", "Call ID", "Channelid", "Call type", "Convertation"};
        tm=new DefaultTableModel(cols,0);
        jTable.setModel(tm);
        fileCall="src\\controller\\call.txt";
        fileConversation="src\\controller\\conversation.txt";
        btSubmit.setEnabled(false);
    }
    
    public boolean checkFormatNumber(String value, String text) {
        if(value.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ban chua nhap " + text);
            return false;
        }
        else {
            for(char c : value.toCharArray()) {
                if (!Character.isDigit(c)) {
                    JOptionPane.showMessageDialog(this, text + " khong hop le");
                    return false;
                }
            }
        }
        return true;
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        textConversation = new javax.swing.JTextField();
        btAddConv = new javax.swing.JButton();
        btDeleteCon = new javax.swing.JButton();
        btFindByConvId = new javax.swing.JButton();
        btFindByCallId = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        textChannel = new javax.swing.JTextField();
        textFindCallId = new javax.swing.JTextField();
        textFindConversationId = new javax.swing.JTextField();
        btSave = new javax.swing.JButton();
        btDisplay = new javax.swing.JButton();
        btSubmit = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Conversation Id");

        textConversation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textConversation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textConversationActionPerformed(evt);
            }
        });

        btAddConv.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btAddConv.setText("Add Conversation");
        btAddConv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddConvActionPerformed(evt);
            }
        });

        btDeleteCon.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btDeleteCon.setText("Delete Conversation");
        btDeleteCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteConActionPerformed(evt);
            }
        });

        btFindByConvId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btFindByConvId.setText("Find by conversationId");
        btFindByConvId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindByConvIdActionPerformed(evt);
            }
        });

        btFindByCallId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btFindByCallId.setText("Find by CallId");
        btFindByCallId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindByCallIdActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Channel Id");

        textChannel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textChannelActionPerformed(evt);
            }
        });

        textFindCallId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFindCallIdActionPerformed(evt);
            }
        });

        textFindConversationId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFindConversationIdActionPerformed(evt);
            }
        });

        btSave.setText("Save File");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btDisplay.setText("Display");
        btDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDisplayActionPerformed(evt);
            }
        });

        btSubmit.setText("Submit");
        btSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSubmitActionPerformed(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btFindByCallId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btAddConv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btFindByConvId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(btDeleteCon))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFindConversationId)
                                    .addComponent(textFindCallId))))
                        .addGap(18, 18, 18)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btDisplay))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textConversation, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textChannel, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(76, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textConversation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addComponent(btSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btAddConv)
                            .addComponent(btDeleteCon)
                            .addComponent(btSave))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btFindByCallId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFindCallId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btFindByConvId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFindConversationId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btDisplay)
                            .addComponent(btUpdate))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textConversationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textConversationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textConversationActionPerformed

    private void btAddConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddConvActionPerformed
        btSubmit.setEnabled(true);
        btDeleteCon.setEnabled(false);
        btSave.setEnabled(false);
        btDisplay.setEnabled(false);
        btFindByCallId.setEnabled(false);
        btFindByConvId.setEnabled(false);
        
        File f = new File(fileConversation);
        int sConversationId = 0;
        int idTable = 0;
        boolean checkData = false;
        if(f.exists()) {
            List<Conversation> lc = IOFile.docra(fileConversation);
            if(lc.size()>0){
                sConversationId = lc.get(lc.size()-1).getConversationId()+1;
                checkData = true;
            }
        }
        if(tm.getRowCount() > 0) {
            idTable = Integer.parseInt(tm.getValueAt(tm.getRowCount()-1, 0).toString());
            checkData = true;
        }
        if(!checkData) Conversation.setSConversationId(100);
        sConversationId = Integer.max((Integer.max(sConversationId, idTable)), Conversation.sConversationId);
        Conversation.setSConversationId(sConversationId);
        
        textConversation.setText(Conversation.getSConversationId() + "");
        textChannel.requestFocus();
    }//GEN-LAST:event_btAddConvActionPerformed

    private void btDeleteConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteConActionPerformed
        int row = jTable.getSelectedRow();
        if(row<0 || row>=jTable.getRowCount()) {
            JOptionPane.showMessageDialog(this, "Chon dong de xoa");
        }
        else {
            List<Call> list = IOFile.docra(fileCall);
            int channelId = Integer.parseInt(tm.getValueAt(row, 2).toString());
            int length = list.size();
            for(int i=0; i<length; i++) {
                if(channelId == list.get(i).getChannelid()) {
                    list.remove(i);
                    i--; length--;
                }
            }
            for(int i=0; i<tm.getRowCount(); i++) {
                if(channelId == Integer.parseInt(tm.getValueAt(i, 2).toString())) {
                    tm.removeRow(i);
                    i--;
                }
            }
            IOFile.viet(fileCall, list);
            btSaveActionPerformed(evt);
        }
    }//GEN-LAST:event_btDeleteConActionPerformed

    private void btFindByConvIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindByConvIdActionPerformed
        if(checkFormatNumber(textFindConversationId.getText(), "Conversation Id")) {
            list=IOFile.docra(fileConversation);
            int conversationId = Integer.parseInt(textFindConversationId.getText());
            tm.setRowCount(0);
            for(Conversation conversation:list) {
                if(conversationId == conversation.getConversationId()) {
                    for(int i=0; i<conversation.getCallList().size(); i++) {
                        tm.addRow(conversation.toObject(i));
                    }
                }
            }
            if(tm.getRowCount()==0)
                JOptionPane.showMessageDialog(this, "Khong tim thay");
        }
        
    }//GEN-LAST:event_btFindByConvIdActionPerformed

    private void btFindByCallIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindByCallIdActionPerformed
        if(checkFormatNumber(textFindCallId.getText(), "Call Id")) {
            list=IOFile.docra(fileConversation);
            int callId = Integer.parseInt(textFindCallId.getText());
            tm.setRowCount(0);
            for(Conversation conversation:list) {
                List<Call> listCall = conversation.getCallList();
                for(int i=0; i<listCall.size(); i++) {
                    if(callId == listCall.get(i).getCallid()) {
                        tm.addRow(conversation.toObject(i));
                    }
                }
            }
            if(tm.getRowCount()==0)
                JOptionPane.showMessageDialog(this, "Khong tim thay");
        }
    }//GEN-LAST:event_btFindByCallIdActionPerformed

    private void textChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textChannelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textChannelActionPerformed

    private void textFindCallIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFindCallIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFindCallIdActionPerformed

    private void textFindConversationIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFindConversationIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFindConversationIdActionPerformed

    private void btSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubmitActionPerformed
        Conversation conv = new Conversation();
        if(checkFormatNumber(textChannel.getText(), "Channel ID")) {
            int channelId = Integer.parseInt(textChannel.getText());
            List<Call> listCallInFile = IOFile.docra(fileCall);
            List<Call> listCall = new ArrayList<>();
            for(Call call:listCallInFile) {
                if(call.getChannelid() == channelId)
                    listCall.add(call);
            }
            conv.setCallList(listCall);
            int length = listCall.size();
            if(length==0) {
                Object[] obj = new Object[] {conv.getConversationId(), "", channelId,  "", ""};
                tm.addRow(obj);
            }
            else {
                for(int i=0; i<length; i++) {
                    tm.addRow(conv.toObject(i));
                }
            }
            
        }
        btAddConv.setEnabled(true);
        btDeleteCon.setEnabled(true);
        btSave.setEnabled(true);
        btDisplay.setEnabled(true);
        btFindByCallId.setEnabled(true);
        btFindByConvId.setEnabled(true);
        btSubmit.setEnabled(false);
        textChannel.setText("");
    }//GEN-LAST:event_btSubmitActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        List<Call> listCall = IOFile.docra(fileCall);
        boolean check = false;
        int length = tm.getRowCount();
        for(int i=0; i<length; i++) {
            if(i<length-1 && Integer.parseInt(tm.getValueAt(i, 0).toString())==Integer.parseInt(tm.getValueAt(i+1, 0).toString())) {
                tm.removeRow(i);
                i--; length--;
                continue;
            }
            for(int j=0; j<listCall.size(); j++) {
                Call call = listCall.get(j);
                
                if(Integer.parseInt(tm.getValueAt(i, 2).toString()) == call.getChannelid()) {
                    int conversationId = Integer.parseInt(tm.getValueAt(i, 0).toString());
                    int callId = call.getCallid();
                    int channelId = Integer.parseInt(tm.getValueAt(i, 2).toString());
                    int callType = call.getCallType();
                    int conversationType = call.getConversationType();
                    Object[] obj = new Object[]{conversationId, callId, 
                        channelId, callType, conversationType};
                    tm.addRow(obj);
                    check = true;
                }
            }
            if(check) {
                tm.removeRow(i);
                i--; length--;
                check = false;
            }
        }
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        list = new ArrayList<>();
        int length = tm.getRowCount();
        boolean check = false;
        int i=0;
        while(i<length) {
            List<Call> listCall = new ArrayList<>();
            int i_conId = Integer.parseInt(tm.getValueAt(i, 0).toString());
            for(int j=i; j<length; j++) {
                int j_conId = Integer.parseInt(tm.getValueAt(j, 0).toString());
                if(i_conId == j_conId) {
                    int callId, channelId, callType, conversationType;
                    if(tm.getValueAt(j, 1).toString().isEmpty()) {
                        callId = callType = conversationType = UNDEFINED_CONDITION;
                    }
                    else {
                        callId = Integer.parseInt(tm.getValueAt(j, 1).toString());
                        callType = Integer.parseInt(tm.getValueAt(j, 3).toString());
                        conversationType = Integer.parseInt(tm.getValueAt(j, 4).toString());
                    }
                    channelId = Integer.parseInt(tm.getValueAt(j, 2).toString());
                    Call call = new Call(callId, channelId, callType, conversationType);
                    listCall.add(call);
                    check = true;
                    i = j;
                }
                else {
                    i = j-1;
                    break;
                }
            }
            if(check) {
                Conversation conversation = new Conversation(i_conId, listCall);
                list.add(conversation);
                check = false;
            }
            i++;
        }
        IOFile.viet(fileConversation, list);
    }//GEN-LAST:event_btSaveActionPerformed

    private void btDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDisplayActionPerformed
        list=IOFile.docra(fileConversation);
        tm.setRowCount(0);
        for(Conversation conversation:list) {
            int length = conversation.getCallList().size();
            for(int i=0; i<length; i++) {
                tm.addRow(conversation.toObject(i));
            }
        }
    }//GEN-LAST:event_btDisplayActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddConv;
    private javax.swing.JButton btDeleteCon;
    private javax.swing.JButton btDisplay;
    private javax.swing.JButton btFindByCallId;
    private javax.swing.JButton btFindByConvId;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSubmit;
    private javax.swing.JButton btUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField textChannel;
    private javax.swing.JTextField textConversation;
    private javax.swing.JTextField textFindCallId;
    private javax.swing.JTextField textFindConversationId;
    // End of variables declaration//GEN-END:variables
}
